#
# Client-side python app for Final Project, this time working with
# web service, which in turn uses AWS S3 ato implement
# a simple ML Model for rental price prediction and apartment description generation.
#
# Final Project for CS 310
#
# Authors:
#   Sharika Mahadevan, Hye Won Hwang, Alejandra Lelo de Larrea Ibarra
#   Northwestern University
#   CS 310
#

###################################################################
#
# Importing packages
#

import os
import pathlib
import logging
import sys
import base64
import json
from configparser import ConfigParser

import requests  # calling web service
# import json  # relational-object mapping

# import matplotlib.pyplot as plt
# import matplotlib.image as img

import streamlit as st

###################################################################
#
# Make Prediction
#

def make_prediction(baseurl, input_data) -> float:
  """
  Make Prediction of rental price based on user input
  
  Parameters
  ----------
  baseurl: baseurl for web service
  input_data: Input data for making prediction
  
  Returns
  -------
  Predicted Rental Price (rounded to 2 decimals)
  """
  
  try:
    ##################################################################################
    # build the data packet:
    ##################################################################################
    data = input_data

    ##################################################################################
    # call the web service:
    ##################################################################################
    api = '/suggest_price'
    url = baseurl + api

    res = requests.post(url, json=data)
    print(res.json())

    ##################################################################################
    # Check if there are errors:
    ##################################################################################
    if res.status_code != 200:
      # failed:
      print("Failed with status code:", res.status_code)
      print("url: " + url)
      if res.status_code == 400:  # we'll have an error message
        body = res.json()
        print("Error message:", body["body"])
      #
      return res.json()

    ##################################################################################
    # success:
    ##################################################################################
    body = res.json()
    print(body)

    price = json.loads(body['body'])

    predicted_price = price["pred_price"]

    print(f"The rental price is predicted to be ${predicted_price}.")
    return {"statusCode": 200,
            "pred_price": predicted_price}

  except Exception as e:
    logging.error("suggest_price() failed:")
    logging.error("url: " + url)
    logging.error(e)
    return {'body': json.dumps(e)}

###################################################################
#
# Generate Description for Apartment
#
def make_description(baseurl, input_data):
  """
  Uses Langchain to make new summary based on the data
  
  Parameters
  ----------
  baseurl: baseurl for web service
  input_data: Data inputted by the user
  
  Returns
  -------
  nothing
  """

  try:
    ##################################################################################
    # build the data packet:
    ##################################################################################
    data = input_data

    ##################################################################################
    # call the web service:
    ##################################################################################
    api = '/make_description'
    url = baseurl + api

    res = requests.post(url, json=data)

    ##################################################################################
    # let's look at what we got back:
    ##################################################################################
    if res.status_code != 200:
      # failed:
      print("Failed with status code:", res.status_code)
      print("url: " + url)
      if res.status_code == 400:  # we'll have an error message
        body = res.json()
        print("Error message:", body["body"])
      #
      return res.json()

    ##################################################################################
    # success:
    ##################################################################################
    body = res.json()
    print(body)

    print(f"The description has been successfully generated by user. Below is the description:\n\n")
    return body

  except Exception as e:
    print("make_description() failed:")
    print("url: " + url)
    print(e)
    return

#########################################################################
# main
#

st.set_page_config(
    page_title="Go To Rental Wizard",
    page_icon="üëç",
)

st.title('** Let\'s get started! **')
st.sidebar.success("Let's get started.")
st.header('Please input these details.')
bathrooms = st.number_input("Please enter the number of bedrooms.", 0, 10)
bedrooms = st.number_input("Please enter the number of bathrooms.", 0, 10)
amenities = st.multiselect(
    'What amenities does your apartment have?',
    options = ['Internet Access', 'Playground', 'Basketball', 'Refrigerator', 'Golf', 
     'AC', 'Dishwasher', 'Wood Floors', 'TV', 'Storage', 'Tennis', 'Patio/Deck', 
     'Gated', 'View', 'Alarm', 'Clubhouse', 'Doorman', 'Hot Tub', 'Fireplace', 
     'Washer Dryer', 'Cable or Satellite', 'Pool', 'Luxury', 'Garbage Disposal', 
     'Parking', 'Elevator', 'Gym'],
     placeholder = "Select all that apply. Multiple selection if holding ctrl. ")
has_photos = st.selectbox("Do you have photos?", ("Yes", "No"))
dogs_allowed = st.selectbox("Are dogs allowed?", ("Yes", "No"))
cats_allowed = st.selectbox("Are cats allowed?", ("Yes", "No"))
square_feet = st.number_input("Please enter the area in square feet.")
address = st.text_input("Please enter the address line 1.")
state_list = ('AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA',
           'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME',
           'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM',
           'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX',
           'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY')
state = st.selectbox("Please select the state.", state_list)
cityname = st.text_input("Please enter the name of the city.")
zipcode = st.text_input("Please enter the zipcode.")
fee = st.number_input("Please enter the amount of any additional fees to pay.")

# Create data packet for APIs
input_data = {
      "bathrooms": int(bathrooms),
      "bedrooms": int(bedrooms),
      "amenities": amenities,
      "has_photo": has_photos,
      "dogs_allowed": dogs_allowed,
      "cats_allowed": cats_allowed,
      "square_feet": square_feet,
      "address": address,
      "cityname": cityname,
      "state": state,
      "zipcode": zipcode,
      "fee": fee
    }

# eliminate traceback so we just get error message:
sys.tracebacklimit = 0

# #
# # what config file should we use for this session?
#
config_file = 'client-files/rental-wizard-client-config.ini'
configur = ConfigParser()
configur.read(config_file)

#
# setup base URL to web service:
#
baseurl = configur.get('client', 'webservice')

# Initialize session state for description and price
if 'generated_description' not in st.session_state:
  st.session_state['generated_description'] = None

if 'predicted_price' not in st.session_state:
  st.session_state['predicted_price'] = None

# Create two columns for Description and Price buttons
col1, col2 = st.columns(2)

with col1:
  with st.form(key = "DescriptionForm"):
    submit_description = st.form_submit_button("Generate a description for your apartment.")
    if submit_description:
      st.session_state['generated_description'] = make_description(baseurl, input_data)
    if st.session_state['generated_description']:
      if st.session_state['generated_description'].get('statusCode') == 200:
        st.write(st.session_state['generated_description']['body'])
      else:
        st.write("There was an error.")
        st.write(st.session_state['generated_description'].get('body', ''))

with col2:
  with st.form(key='PriceForm'):
    submit_price = st.form_submit_button("Get an estimate of fair price for your apartment.")
    if submit_price:
      st.session_state['predicted_price'] = make_prediction(baseurl, input_data)
    if st.session_state['predicted_price']:
      if st.session_state['predicted_price'].get('statusCode') == 200:
        formatted_price = "${:,.2f}".format(st.session_state['predicted_price']['pred_price'])
        st.write(formatted_price)
      else:
        st.write("There was an error.")
        st.write(st.session_state['predicted_price'].get('body', ''))


